// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"github.com/dexguitar/chatapp/configs"
	"github.com/dexguitar/chatapp/db"
	"github.com/dexguitar/chatapp/internal/handler"
	"github.com/dexguitar/chatapp/internal/queue"
	"github.com/dexguitar/chatapp/internal/repo"
	"github.com/dexguitar/chatapp/internal/service"
)

// Injectors from wire.go:

func InitApplication() (*application, error) {
	config, err := configs.LoadConfig()
	if err != nil {
		return nil, err
	}
	userRepository := repo.NewUserRepo()
	postgresqlDB, err := db.NewPostgresDB(config)
	if err != nil {
		return nil, err
	}
	userService := service.NewUserService(userRepository, postgresqlDB)
	userHandler := handler.NewUserHandler(userService)
	kafkaProducer, err := queue.NewKafkaProducer(config)
	if err != nil {
		return nil, err
	}
	kafkaConsumer, err := queue.NewKafkaConsumer(config)
	if err != nil {
		return nil, err
	}
	queueQueue, err := queue.New(kafkaProducer, kafkaConsumer)
	if err != nil {
		return nil, err
	}
	messageService := service.NewMessageService(queueQueue)
	messageHandler := handler.NewMessageHandler(messageService)
	hub := service.NewHub()
	wsHandler := handler.NewWSHandler(hub, messageService)
	httpHandler := handler.InitRouter(userHandler, messageHandler, wsHandler)
	cmdApplication := newApplication(config, httpHandler, queueQueue, hub)
	return cmdApplication, nil
}
